@typeparam TItem
@implements IDisposable
@using System.Collections.Generic
@using System.Timers

<input type="text" class="w3-input search" placeholder="@_placeholder" @bind=text @bind:event="oninput">
<ul class="w3-ul">
    @if (this.results != null && ChildContent != null) {
        foreach (var item in this.results) {
            if (item != null) {
                <li>@ChildContent(item)</li>
            }
        }
    }
</ul>

@code {
    [Parameter] public float DebounceTime {get; set;} = 0.5f;
    [Parameter] public string Placeholder {get; set;}
    [Parameter] public IEnumerable<TItem> Items {get; set;}
    [Parameter] public RenderFragment<TItem> ChildContent {get; set;}
    [Parameter] public Func<string, TItem, bool> Comparator {get; set;} 

    private string _placeholder => Placeholder ?? "search";
    private string _text;
    private string text {
        get => _text;
        set {
            _text = value;
            StartSearch();
        }
    }

    private Timer timer;
    public void StartSearch() {
        if (timer == null) {
            timer = new Timer();
            timer.AutoReset = false;
            timer.Interval = TimeSpan.FromSeconds(DebounceTime).TotalMilliseconds;
            timer.Elapsed += refreshResults;
        }
        timer.Stop();
        timer.Start();
    }

    public void Dispose() {
        timer?.Dispose();
    }

    private List<TItem> results;
    private bool defaultComparator (string text, TItem item) {
        return System.Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf(
            item.ToString() ?? string.Empty, 
            text, 
            System.Globalization.CompareOptions.IgnoreCase
        ) >= 0;
    }
    private void refreshResults(object sender, ElapsedEventArgs e) {
        this.results = null;
        var term = this.text ?? string.Empty;
        if (string.IsNullOrEmpty(term)) {
            InvokeAsync(StateHasChanged);
            return;
        }
        var compare = this.Comparator ?? defaultComparator;
        Task.Run(() => {
            if (Items == null) {
                return;
            }

            var results = Items.Where(x => compare(term, x)).ToList();
            if (term == this.text) {
                this.results = results;
                InvokeAsync(StateHasChanged);
            }
        });
    }

}

